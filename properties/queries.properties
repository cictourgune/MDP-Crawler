# AdminDao
	SELECT_DAILY_INFO = SELECT da.gm_country, dat.name, \
						COUNT(DISTINCT(ftpp.id_accommodation)) AS num_accommodations, \
						COUNT(CASE WHEN (ftpp.price_flag = 1 OR ftpp.price_flag = 0) THEN 1 ELSE NULL END) AS ok, \
						COUNT(CASE WHEN ftpp.price_flag = -1 THEN 1 ELSE NULL END) AS ko, \
						COUNT(CASE WHEN ftpp.price_flag = -2 THEN 1 ELSE NULL END) AS hde_not_found, \
						COUNT(*) AS total \
					FROM ft_product_price ftpp JOIN d_accommodation da ON ftpp.id_accommodation = da.id_accommodation \
						JOIN d_accommodation_type dat ON dat.id_accommodation_type = da.id_accommodation_type \
					WHERE ftpp.id_booking_date = CURDATE() \
					GROUP BY da.gm_country, dat.name

	INSERT_ADMIN_INFO = INSERT INTO ft_admin (instance, start_time, end_time, total_time, data_size, country, acc_type, acc_count, rows_total, rows_ok, rows_ko, rows_hde_nf) \
					VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?) 
# AccommodationDao
	SELECT_SCRAPPABLE_ACCOMMODATIONS = SELECT nmac.id_accommodation, nmac.url_accommodation_channel \
		FROM (nm_accommodation_channel nmac JOIN \
			(d_accommodation da JOIN d_geography dg ON da.id_geography = dg.id_geography) ON nmac.id_accommodation = da.id_accommodation) \
		WHERE 1=1 #country_constraint# #nuts2_constraint# #nuts3_constraint# #locality_constraint# #accommodationtype_constraint#

	FIND_ACCOMMODATION_ID_CHANNEL = SELECT * FROM nm_accommodation_channel nmac JOIN d_accommodation da ON nmac.id_accommodation = da.id_accommodation WHERE id_accommodation_channel = ?

	FIND_ACCOMMODATION_GEOGRAPHY_CHANNEL = SELECT id_geography FROM d_geography WHERE id_geography_channel = ?

	# Si el accommodation no existe en 'nm_accommodation_channel':
	INSERT_DAC = INSERT INTO d_accommodation \
		(name, id_geography, category, latitude, longitude, id_accommodation_type, gm_postal_code, gm_street_number, gm_route, gm_locality, gm_aal1, gm_aal2, gm_aal3, gm_aal4, gm_country, locked) \
		VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)

	INSERT_NMAC = INSERT INTO nm_accommodation_channel (id_channel, id_accommodation, id_accommodation_channel, url_accommodation_channel, first_seen, last_seen) VALUES (1, ?, ?, ?, ?, ?)

	# Si el accommodation existe, pero han cambiado sus datos:
	UPDATE_ACCOMMODATION = UPDATE d_accommodation da, nm_accommodation_channel nmac \
		SET da.name = ?, da.id_geography = ?, da.category = ?, da.latitude = ?, da.longitude = ?, da.id_accommodation_type = ?, \
		da.gm_country = ?, da.gm_aal1 = ?, da.gm_aal2 = ?, da.gm_aal3 = ?, da.gm_aal4 = ?, da.gm_locality = ?, da.gm_route = ?, \
		da.gm_street_number = ?, da.gm_postal_code = ?, nmac.id_accommodation_channel = ?, nmac.url_accommodation_channel = ?, \
		nmac.last_seen = ? WHERE da.id_accommodation = nmac.id_accommodation AND da.id_accommodation = ?

	UPDATE_ACCOMMODATION_LAST_SEEN = UPDATE nm_accommodation_channel nmac SET nmac.last_seen = ? WHERE nmac.id_accommodation = ?

	GET_ACCOMMODATION_TYPES = SELECT id_accommodation_type, name FROM d_accommodation_type

# RegionDao
	# Dependiendo el país se obtendrá un nivel u otro. Eso lo deciden los par�metros de entrada en la llamada al JAR
	SELECT_SCRAPPABLE_REGIONS = SELECT * FROM d_geography dg WHERE 1=1 #country_constraint# #nuts2_constraint# #nuts3_constraint# #locality_constraint#

# ProductDao
	FIND_PRODUCT = 	SELECT * \
		FROM d_product \
		WHERE name = ? AND adult_amount = ? AND children_amount = ? AND breakfast_price = ? AND breakfast_included = ? AND half_board = ? \
		AND full_board = ? AND all_inclusive = ? AND free_cancellation = ? AND pay_stay = ? AND pay_later = ? AND non_refundable = ?

	INSERT_PRODUCT = INSERT INTO d_product \
		(name, adult_amount, children_amount, breakfast_price, breakfast_included, half_board, full_board, all_inclusive, free_cancellation, pay_stay, pay_later, non_refundable) \
		VALUES(?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)

	INSERT_PRODUCT_PRICE = INSERT INTO ft_product_price (id_product, id_accommodation, id_channel, id_booking_date, id_checkin_date, los, price, price_flag) VALUES (?, ?, ?, ?, ?, ?, ?, ?)

	QUERY_ACCOMMODATION_THRESHOLD = SELECT COUNT(id_accommodation) FROM ft_thresholds WHERE id_accommodation = ? AND threshold IS NOT NULL AND ? >= threshold

	QUERY_ACCOMMODATION_REVISION = SELECT COUNT(id_accommodation) FROM pricing_DB.ft_thresholds WHERE id_accommodation = ? AND ? > COALESCE(max_price, 0) AND ? < COALESCE(threshold, ~0 >> 1) 

# RatingDao
	FIND_RATING_VISITOR_SEGMENT_ID = SELECT id_visitor_segment FROM d_visitor_segment WHERE segment = ?
	INSERT_RATING_VISITOR_SEGMENT = INSERT INTO d_visitor_segment (segment) VALUES (?)
	# Esto se completa desde el código porque la cantidad de parámetros varía
	INSERT_RATING = INSERT INTO ft_accommodation_rating (

# ReviewDao
	FIND_LATEST_REVIEW_DATE = SELECT MAX(id_scraping_date) FROM ft_accommodation_review WHERE id_accommodation = ?
	FIND_REVIEW_VISITOR_SEGMENT_ID = SELECT id_visitor_segment FROM d_visitor_segment WHERE segment = ?
	INSERT_REVIEW_VISITOR_SEGMENT = INSERT INTO d_visitor_segment (segment) VALUES (?)
	INSERT_REVIEW = INSERT INTO ft_accommodation_review \
		(id_accommodation, id_scraping_date, id_visitor_segment, type_trip, type_room, stay_nights, with_pet, visitor_from, review_date, review_lang, review_good, review_bad, score) \
		VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)

# ServicesDao
	FIND_SERVICES_ENTRY = SELECT * FROM ft_accommodation_services WHERE id_accommodation = ? AND free_wifi = ? AND free_parking = ? AND pets_allowed = ? AND activities = ?
	INSERT_SERVICES = INSERT INTO ft_accommodation_services (id_accommodation, id_scraping_date, free_wifi, free_parking, pets_allowed, activities) VALUES (?, ?, ?, ?, ?, ?)

# DatabaseDao
	GET_DATABASE_SIZE = SELECT SUM(round(((data_length + index_length) /1024/1024), 2)) 'dbSize' FROM information_schema.TABLES WHERE table_schema = 'pricing_DB'